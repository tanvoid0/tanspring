//package com.tanvoid0.tanspring.security;
//
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Configuration;
//import org.springframework.security.authentication.AuthenticationManager;
//import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
//import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
//import org.springframework.security.config.annotation.web.builders.HttpSecurity;
//import org.springframework.security.config.annotation.web.builders.WebSecurity;
//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
//import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
//import org.springframework.security.config.http.SessionCreationPolicy;
//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
//import org.springframework.security.crypto.password.PasswordEncoder;
//import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
//
//import com.tanvoid0.tanspring.security.jwt.AuthEntryPointJwt;
//import com.tanvoid0.tanspring.security.jwt.AuthTokenFilter;
//import com.tanvoid0.tanspring.security.services.UserDetailsServiceImpl;
//
//@Configuration
//@EnableWebSecurity
//@EnableGlobalMethodSecurity(
//    // securedEnabled = true,
//    // jsr250Enabled = true,
//    prePostEnabled = true)
//public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
////  @Autowired
////  UserDetailsServiceImpl userDetailsService;
//
//  @Autowired
//  private AuthEntryPointJwt unauthorizedHandler;
//
//  @Bean
//  public AuthTokenFilter authenticationJwtTokenFilter() {
//    return new AuthTokenFilter();
//  }
//
//  @Override
//  public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {
////    authenticationManagerBuilder.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
//  }
//
//  @Bean
//  @Override
//  public AuthenticationManager authenticationManagerBean() throws Exception {
////    return super.authenticationManagerBean();
//  }
//
////  @Bean
////  public PasswordEncoder passwordEncoder() {
////    return new BCryptPasswordEncoder();
////  }
////
////  @Autowired
////  public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
////    auth.inMemoryAuthentication().withUser("user").password("password").roles("USER");
////  }
//
////  @Override
////  protected void configure(HttpSecurity http) throws Exception {
////    http.cors().and().csrf().disable()
////        .exceptionHandling().authenticationEntryPoint(unauthorizedHandler)
////        .and()
////        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
////        .authorizeRequests()
////        .antMatchers("/api/auth/**").permitAll()
////        .antMatchers("/api/user/**").permitAll()
////        .antMatchers("/api/test/**").permitAll()
////        .antMatchers("/api/password").permitAll()
////        .anyRequest().authenticated();
////
////    http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
////  }
//
//  @Override
//  public void configure(WebSecurity web) throws Exception {
////    web.ignoring().antMatchers(
////        "/v3/**",
////        "/v2/api-docs",
////        "/configuration/ui",
////        "/swagger-resources/**",
////        "/configuration/security",
////        "/swagger-ui.html",
////        "/webjars/**");
//  }
//}